// In Node.js, "ejs" stands for Embedded JavaScript. It is a templating language that allows us to generate
//HTML markup with plain JavaScript. EJS lets us embed JavaScript code directly within our HTML markup,
//making it  easier to generate dynamic content based on variables, conditions, loops, and other programmatic 
//constructs


// Here are some key features and aspects of EJS:

// Embedded JavaScript: EJS allows us to embed JavaScript directly into our HTML markup using special tags 
// like <% %> or <%= %>. This makes it easy to mix static HTML with dynamic content generated by JavaScript.

// Variables and Logic: we can use JavaScript variables, conditions (if statements), loops (for and while), 
// and other programming constructs directly within ejs EJS templates. For example, <%= user.name %> would 
// output the name property of the user object.

// Partial Templates: EJS supports partials, which are smaller reusable templates that can be included within 
// other templates. This helps in keeping your code DRY (Don't Repeat Yourself) and improves maintainability.

//  Express Integration: EJS is commonly used with Express.js, a popular web application framework for Node.js.
//  Express makes it easy to render EJS templates and pass data from your server-side code to the templates  //for  dynamic content generation.


// Client-side Support: EJS templates can be rendered both server-side (to generate HTML that is sent to the 
// client) and client-side (using JavaScript on the browser). This flexibility allows for efficient rendering 
// of dynamic content.

// To use EJS in a Node.js application, we have to  typically install it via npm (npm install ejs) and then configure
// it in our Express application to render views using EJS. Hereâ€™s a basic example of how you might set up EJS
// with Express:

//javascript code
const express = require('express');
const path=require("path")
const app = express();
const port = 4000;

// Set EJS as the view engine
app.set('view engine', 'ejs');
app.set("views",path.join(__dirname,"/views"))

// Render a simple EJS template
app.get('/', (req, res) => {
    res.render('index'); // Render the 'index.ejs' template
});

app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});



// In this example:

// We set EJS as the view engine using app.set('view engine', 'ejs').
// We render an EJS template named index.ejs with data (user) passed to it.
// Overall, EJS is a versatile and popular choice for templating in Node.js applications due to its simplicity, 
// integration with Express, and flexibility in handling dynamic content generation.

